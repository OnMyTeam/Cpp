//Chapter24 클래스 기초

#include<iostream>

using namespace std;

/*
    객체(Object) : 모든 사물을 의미한다. C++ 에서 객체를 의미하는 것은 각 변수들도 객체로 취급할수 있다.
    하지만 객체지향 프로그래밍을 지원학 위해 제공되는 수단은 class 이다
    class는 객체가 아니다! int 변수도 하나의 객체이다. class를 보고 객체라고 하는것은 잘못된것이고 하나의 변수 타입이라고 보면됨.
    class로 생성한 변수는 인스턴스라고 한다. 인스턴스를 보고 객체라고함. class는 객체를 만들기 위한 틀이다. 
    객체지향 프로그래밍(OOP) : 객체들의 관계를 설정해주어서 부품을 조립하듯이 객체들을 조립하여 완성된 프로그램을 만들어나가는 방식이다.
     
    class 생성방법 : class 클래스 {};
                    코드블럭안에 멤버변수를 넣고, 함수도 멤버로 만들 수 있다.

    class에서는 4가지 속성이 있다.  
    캡슐화 : 클래스 안에 속하는 여러 변수 또는 함수를 하나의 class로 묶어 줌
    은닉화 : 클래스 안에 속하는 변수 또는 함수를 내가 원하는 부분만 외부에 공개하고 공개하지 않을 수 있다.
        - public(default) : 클래스 내부와 외부에서 모드 접근 가능한 방법
        - protected : 클래스 외부에서는 접근 불가, 내부 또는 자식 클래스에서는 접근이 가능하다.
        - private : 자기 자신 내부에서만 접근이 가능하고 외부나 자식클래스에서는 접근이 불가능하다.
    상속성 : 클래스 간에 부모, 자식관계를 형성할 수 있다. 자식 클래스는 부모클래스의 멤버를 물려받아 자신의 것 처럼 사용할 수 있다.
             단, private으로 되어 있는 멤버에는 접근이 불가능 하다.
    다형성 : 부모 자식관계로 상속관계가 형성되어 있는 클래스간에 서로 형변환이 가능한 성질을 말한다.
 */
class CTracer
{   

    char m_cStrName[32];
    //  public 키워드 아래에 있는 멤버는 모두 외부에서 접근이 가능하다.
    public:
    int m_iAttack;
    int m_iHP; 
    private:
    int m_iFlash;

    public:
        void OutPut()
        {
            cout << "출력" << endl;
        }
};
int main()
{
      // main() 함수 안은 클래스 외부이기 때문에 public으로 설정 되어 있는 멤버에만 접근이 가능하다.
    CTracer tr1;
    tr1.OutPut();
    
    return 0;
}